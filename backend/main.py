from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Literal, Dict
from pydantic import BaseModel

from settings import (
    PROVIDER,
    FRONTEND_ORIGIN,
    OPENAI_API_KEY,
    GROQ_API_KEY,
)
from providers.mock_provider import MockProvider
from providers.openai_provider import OpenAIProvider
from providers.groq_provider import GroqProvider

app = FastAPI()

# allow local React dev server
app.add_middleware(
    CORSMiddleware,
    allow_origins=[FRONTEND_ORIGIN],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Select provider
if PROVIDER == "openai" and OPENAI_API_KEY:
    chat_provider = OpenAIProvider()
elif PROVIDER == "groq" and GROQ_API_KEY:
    chat_provider = GroqProvider()
else:
    print("⚠️  No valid API key found — using MockProvider for now.")
    chat_provider = MockProvider()


# Pydantic models for request validation
class Msg(BaseModel):
    role: Literal["user", "assistant", "system"]
    content: str


class ChatRequest(BaseModel):
    messages: List[Msg]  # we expect a short window of the recent chat


@app.post("/api/chat")
def chat(req: ChatRequest):
    """Return one assistant reply generated by the configured provider.
    Later, we’ll add RAG context here and pass it into the provider."""
    msgs: List[Dict[str, str]] = [m.model_dump() for m in req.messages]
    reply = chat_provider.generate(msgs, context="")
    return {"reply": reply}


@app.get("/api/health")
def health():
    return {"ok": True}


@app.get("/api/resume")
def resume():
    # temporary stub; we’ll swap this with your real data later
    return {
        "name": "Your Name",
        "title": "Software Engineer",
        "skills": ["Python", "FastAPI", "React", "PostgreSQL"],
        "projects": [
            {"name": "Project A", "desc": "What it does…", "link": "#"},
            {"name": "Project B", "desc": "What it does…", "link": "#"},
        ],
    }


@app.get("/")
def root():
    return {"message": "Backend is running!"}
